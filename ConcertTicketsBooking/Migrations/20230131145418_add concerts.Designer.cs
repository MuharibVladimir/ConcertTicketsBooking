// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace ConcertTicketsBooking.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230131145418_add concerts")]
    partial class addconcerts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtistConcert", b =>
                {
                    b.Property<long>("ArtistsId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ConcertsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArtistsId", "ConcertsId");

                    b.HasIndex("ConcertsId");

                    b.ToTable("ArtistConcert");
                });

            modelBuilder.Entity("Entities.Models.Artist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Entities.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Entities.Models.Concert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConcertTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("TicketsNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConcertTypeId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Concerts");
                });

            modelBuilder.Entity("Entities.Models.ConcertType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConcertTypes");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Entities.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Entities.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<Guid?>("BookingId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConcertId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ConcertId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeatNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId1");

                    b.HasIndex("ConcertId1");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Models.Classic", b =>
                {
                    b.HasBaseType("Entities.Models.ConcertType");

                    b.Property<string>("Composer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Classic", (string)null);
                });

            modelBuilder.Entity("Entities.Models.OpenAir", b =>
                {
                    b.HasBaseType("Entities.Models.ConcertType");

                    b.Property<string>("DrivingDirections")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadLiner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("OpenAir", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Party", b =>
                {
                    b.HasBaseType("Entities.Models.ConcertType");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.ToTable("Party", (string)null);
                });

            modelBuilder.Entity("ArtistConcert", b =>
                {
                    b.HasOne("Entities.Models.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Concert", null)
                        .WithMany()
                        .HasForeignKey("ConcertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Booking", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Concert", b =>
                {
                    b.HasOne("Entities.Models.ConcertType", "ConcertType")
                        .WithMany("Concerts")
                        .HasForeignKey("ConcertTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Place", "Place")
                        .WithMany("Concerts")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConcertType");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Entities.Models.Ticket", b =>
                {
                    b.HasOne("Entities.Models.Booking", "Booking")
                        .WithMany("Tickets")
                        .HasForeignKey("BookingId1");

                    b.HasOne("Entities.Models.Concert", "Concert")
                        .WithMany("Tickets")
                        .HasForeignKey("ConcertId1");

                    b.Navigation("Booking");

                    b.Navigation("Concert");
                });

            modelBuilder.Entity("Entities.Models.Classic", b =>
                {
                    b.HasOne("Entities.Models.ConcertType", null)
                        .WithOne()
                        .HasForeignKey("Entities.Models.Classic", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.OpenAir", b =>
                {
                    b.HasOne("Entities.Models.ConcertType", null)
                        .WithOne()
                        .HasForeignKey("Entities.Models.OpenAir", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Party", b =>
                {
                    b.HasOne("Entities.Models.ConcertType", null)
                        .WithOne()
                        .HasForeignKey("Entities.Models.Party", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Booking", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Entities.Models.Concert", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Entities.Models.ConcertType", b =>
                {
                    b.Navigation("Concerts");
                });

            modelBuilder.Entity("Entities.Models.Place", b =>
                {
                    b.Navigation("Concerts");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
